set(TESTS_EXECUTABLE tests)
set(NAME_INCLUDE "false" CACHE PATH "Path to gtest source distribution, for make it subproject")

if(GTEST_SOURCE_DIR)
    message(STATUS "There was GTEST_SOURCE_DIR found so gtest will be builded as an subproject")
    set(GTEST_FOUND true)
    set(gtest_force_shared_crt true CACHE INTERNAL "")
    SET(BUILD_SHARED_LIBS false CACHE INTERNAL "")
    add_subdirectory(${GTEST_SOURCE_DIR} ${CMAKE_BINARY_DIR}/gtest)
    set(GTEST_LIBRARIES gtest)
    set(GTEST_MAIN_LIBRARIES gtest_main)
    set(GTEST_BOTH_LIBRARIES gtest gtest_main)
    set(GTEST_INCLUDE_DIRS "${GTEST_SOURCE_DIR}/include")
else()
    message(WARNING "There wasn't GTEST_SOURCE_DIR found so gtest will be found with standard cmake methods")
    message(WARNING "It can make building tests more hard for different configurations")
    find_package(GTest)
endif()
if(GTEST_FOUND)
    message(STATUS "Google tests found, unit tests are available")
    enable_testing()
    include_directories(${GTEST_INCLUDE_DIRS})
    find_package( Threads )
    aux_source_directory(. SRC_LIST)
    add_executable(${TESTS_EXECUTABLE} ${SRC_LIST})

    if(UNIX)
        target_link_libraries(${TESTS_EXECUTABLE} ${GTEST_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${PROJECT_NAME} rt m)
    elseif(WIN32)
        if(CMAKE_COMPILER_IS_GNUCXX)
            target_link_libraries(${TESTS_EXECUTABLE} kernel32 ${GTEST_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${PROJECT_NAME} )
        else(CMAKE_COMPILER_IS_GNUCXX)
            target_link_libraries(${TESTS_EXECUTABLE} ${GTEST_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT} ${PROJECT_NAME} )
        endif(CMAKE_COMPILER_IS_GNUCXX)
    endif(UNIX)
    add_test(all-tests ${TESTS_EXECUTABLE})
else()
    message(WARNING "No google tests found so unit tests are not available")
endif()

